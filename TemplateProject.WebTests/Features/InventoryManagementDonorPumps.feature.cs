// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TemplateProject.WebTests.Features
{
    using TechTalk.SpecFlow;


    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class InventoryManagementDonorPumpsFeature
    {

        private static TechTalk.SpecFlow.ITestRunner testRunner;

#line 1 "InventoryManagementDonorPumps.feature"
#line hidden

        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Inventory Management Donor Pumps", "\tIn order manage Pumps\r\n\tAs a Milk Bank or Warehouse user\r\n\tI want to be able to " +
                    "add, edit, and delete pump information", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }

        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null)
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Inventory Management Donor Pumps")))
            {
                TemplateProject.WebTests.Features.InventoryManagementDonorPumpsFeature.FeatureSetup(null);
            }
        }

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }

        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }

        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("5.5.1.1 Ability to add a new pump")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Inventory Management Donor Pumps")]
        public virtual void _5_5_1_1AbilityToAddANewPump()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("5.5.1.1 Ability to add a new pump", ((string[])(null)));
#line 6
            this.ScenarioSetup(scenarioInfo);
#line 7
            testRunner.Given("Username MbtsMbTester1 logged in with password Prolacta99", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
            testRunner.When("user navigates to pumps", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 9
            testRunner.And("element with id btnAddPump is clicked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
            testRunner.And("text 987654321 entered in PumpSerialNumber", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
            testRunner.And("text 01/11/2018 entered in DateAcquired", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
            testRunner.And("dropdown with id pumpStatus value Available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
            testRunner.And("text 0 entered in HoursUsed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
            testRunner.And("text Test Note entered in Notes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
            testRunner.And("element with class k-grid-update is clicked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
            testRunner.Then("the 1 column in 1 row in Inventory grid should be 987654321", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 17
            testRunner.Then("the 2 column in 1 row in Inventory grid should be 01/11/2018", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 18
            testRunner.Then("the 3 column in 1 row in Inventory grid should be Available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 19
            testRunner.Then("the 4 column in 1 row in Inventory grid should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 20
            testRunner.Then("the 5 column in 1 row in Inventory grid should be Test Note", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("5.5.1.1.2 User can edit the Serial Number, Date Acquired, and Notes.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Inventory Management Donor Pumps")]
        public virtual void _5_5_1_1_2UserCanEditTheSerialNumberDateAcquiredAndNotes_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("5.5.1.1.2 User can edit the Serial Number, Date Acquired, and Notes.", ((string[])(null)));
#line 22
            this.ScenarioSetup(scenarioInfo);
#line 23
            testRunner.Given("Username MbtsMbTester1 logged in with password Prolacta99", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 24
            testRunner.When("user navigates to pumps", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 25
            testRunner.And("element with class k-grid-edit is clicked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
            testRunner.And("dropdown with id pumpStatus value Pending", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 27
            testRunner.And("text 1 entered in HoursUsed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 28
            testRunner.And("text This is an edit to a note. entered in Notes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 29
            testRunner.And("element with class k-grid-update is clicked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 30
            testRunner.Then("the 3 column in 1 row in Inventory grid should be Pending", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 31
            testRunner.Then("the 4 column in 1 row in Inventory grid should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 32
            testRunner.Then("the 5 column in 1 row in Inventory grid should be This is an edit to a note.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("5.5.1.1.3 User can change the option of ‘Status’ to ‘Returned but Not Available’ " +
            "for the scenario that a pump is checked out for other purpose.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Inventory Management Donor Pumps")]
        public virtual void _5_5_1_1_3UserCanChangeTheOptionOfStatusToReturnedButNotAvailableForTheScenarioThatAPumpIsCheckedOutForOtherPurpose_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("5.5.1.1.3 User can change the option of ‘Status’ to ‘Returned but Not Available’ " +
                    "for the scenario that a pump is checked out for other purpose.", ((string[])(null)));
#line 34
            this.ScenarioSetup(scenarioInfo);
#line 35
            testRunner.Given("Username MbtsMbTester1 logged in with password Prolacta99", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 36
            testRunner.When("user navigates to pumps", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 37
            testRunner.And("element with class k-grid-edit is clicked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 38
            testRunner.And("dropdown with id pumpStatus value Maintenance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 39
            testRunner.And("element with class k-grid-update is clicked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 40
            testRunner.Then("the 3 column in 1 row in Inventory grid should be Maintenance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("5.5.1.2 Ability to search Pump Inventory")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Inventory Management Donor Pumps")]
        public virtual void _5_5_1_2AbilityToSearchPumpInventory()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("5.5.1.2 Ability to search Pump Inventory", ((string[])(null)));
#line 42
            this.ScenarioSetup(scenarioInfo);
#line 43
            testRunner.Given("Username MbtsMbTester1 logged in with password Prolacta99", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 44
            testRunner.When("new pump added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 45
            testRunner.And("text 987654321 entered in pumpSearchBox", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 46
            testRunner.Then("the 1 column in 1 row in Inventory grid should be 987654321", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("5.5.1.3 A table containing Pump Inventory information")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Inventory Management Donor Pumps")]
        public virtual void _5_5_1_3ATableContainingPumpInventoryInformation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("5.5.1.3 A table containing Pump Inventory information", ((string[])(null)));
#line 48
            this.ScenarioSetup(scenarioInfo);
#line 49
            testRunner.Given("Username MbtsMbTester1 logged in with password Prolacta99", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 50
            testRunner.When("user navigates to pumps", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 51
            testRunner.Then("the Inventory grid contains column Pump Serial Number", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 52
            testRunner.Then("the Inventory grid contains column Date Acquired", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 53
            testRunner.Then("the Inventory grid contains column Status", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 54
            testRunner.Then("the Inventory grid contains column Hours Used", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 55
            testRunner.Then("the Inventory grid contains column Notes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("5.5.1.3.3 Status. The status contains Available, Pending, Retired, Not Returned, " +
            "Maintenance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Inventory Management Donor Pumps")]
        public virtual void _5_5_1_3_3Status_TheStatusContainsAvailablePendingRetiredNotReturnedMaintenance()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("5.5.1.3.3 Status. The status contains Available, Pending, Retired, Not Returned, " +
                    "Maintenance", ((string[])(null)));
#line 57
            this.ScenarioSetup(scenarioInfo);
#line 58
            testRunner.Given("Username MbtsMbTester1 logged in with password Prolacta99", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 59
            testRunner.When("user navigates to pumps", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 60
            testRunner.And("element with id btnAddPump is clicked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 61
            testRunner.Then("dropdown with id pumpStatus has Available,Pending,Not Returned,Returned,Retired,M" +
                               "aintenance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("5.5.1.3.6 The usage history shall be available when clicking for the number of ti" +
            "mes used with the following information")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Inventory Management Donor Pumps")]
        public virtual void _5_5_1_3_6TheUsageHistoryShallBeAvailableWhenClickingForTheNumberOfTimesUsedWithTheFollowingInformation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("5.5.1.3.6 The usage history shall be available when clicking for the number of ti" +
                    "mes used with the following information", ((string[])(null)));
#line 63
            this.ScenarioSetup(scenarioInfo);
#line 64
            testRunner.Given("Username MbtsMbTester1 logged in with password Prolacta99", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 65
            testRunner.When("pump order created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 66
            testRunner.And("user navigates to pumps", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 67
            testRunner.And("text 987654321 entered in pumpSearchBox", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 68
            testRunner.When("element with class k-i-expand clicked in Inventory grid with row containing text " +
                               "987654321", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 69
            testRunner.Then("element with id PumpHistory is visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 70
            testRunner.Then("the PumpHistory grid contains column Order ID", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 71
            testRunner.Then("the PumpHistory grid contains column Donor ID", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 72
            testRunner.Then("the PumpHistory grid contains column First Name", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 73
            testRunner.Then("the PumpHistory grid contains column Last Name", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 74
            testRunner.Then("the PumpHistory grid contains column Status", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 75
            testRunner.Then("the PumpHistory grid contains column Order Actual Date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 76
            testRunner.Then("the PumpHistory grid contains column Tracking Number", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 77
            testRunner.Then("the PumpHistory grid contains column Date Shipped", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 78
            testRunner.Then("the PumpHistory grid contains column Return Tracking Number", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 79
            testRunner.Then("the PumpHistory grid contains column Date Returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("5.5.1.4.1 User can edit only the Status, Hours Used, and Notes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Inventory Management Donor Pumps")]
        public virtual void _5_5_1_4_1UserCanEditOnlyTheStatusHoursUsedAndNotes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("5.5.1.4.1 User can edit only the Status, Hours Used, and Notes", ((string[])(null)));
#line 81
            this.ScenarioSetup(scenarioInfo);
#line 82
            testRunner.Given("Username MbtsMbTester1 logged in with password Prolacta99", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 83
            testRunner.When("user navigates to pumps", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 84
            testRunner.And("element with class k-grid-edit is clicked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 85
            testRunner.Then("element with id PumpSerialNumber has attribute readonly with value true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 86
            testRunner.Then("element with id DateAcquired has attribute readonly with value true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("5.5.1.4.2.1 Will be used for warehouse to state pumps have been returned")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Inventory Management Donor Pumps")]
        public virtual void _5_5_1_4_2_1WillBeUsedForWarehouseToStatePumpsHaveBeenReturned()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("5.5.1.4.2.1 Will be used for warehouse to state pumps have been returned", ((string[])(null)));
#line 88
            this.ScenarioSetup(scenarioInfo);
#line 89
            testRunner.Given("Username MbtsMbTester1 logged in with password Prolacta99", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 90
            testRunner.When("user navigates to pumps", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 91
            testRunner.And("element with id statusHeader is clicked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 92
            testRunner.And("element with class k-grid-edit is clicked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 93
            testRunner.And("dropdown with id pumpStatus value Returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 94
            testRunner.And("element with class k-grid-update is clicked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 95
            testRunner.Then("the 3 column in 1 row in Inventory grid should be Returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("5.5.1.4.2.2 Upon confirmation, this will update the Return Date")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Inventory Management Donor Pumps")]
        public virtual void _5_5_1_4_2_2UponConfirmationThisWillUpdateTheReturnDate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("5.5.1.4.2.2 Upon confirmation, this will update the Return Date", ((string[])(null)));
#line 97
            this.ScenarioSetup(scenarioInfo);
#line 98
            testRunner.Given("Username MbtsMbTester1 logged in with password Prolacta99", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 99
            testRunner.When("pump order created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 100
            testRunner.And("user navigates to pumps", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 101
            testRunner.And("text Pending entered in pumpSearchBox", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 102
            testRunner.And("element with class k-grid-edit is clicked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 103
            testRunner.And("dropdown with id pumpStatus value Returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 104
            testRunner.And("element with class k-grid-update is clicked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 105
            testRunner.When("element with class k-i-expand clicked in Inventory grid with row containing text " +
                               "Returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 106
            testRunner.Then("element with id PumpHistory is visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("5.5.1.5 User shall be able to delete entries of pump inventory")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Inventory Management Donor Pumps")]
        public virtual void _5_5_1_5UserShallBeAbleToDeleteEntriesOfPumpInventory()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("5.5.1.5 User shall be able to delete entries of pump inventory", ((string[])(null)));
#line 108
            this.ScenarioSetup(scenarioInfo);
#line 109
            testRunner.Given("Username MbtsMbTester1 logged in with password Prolacta99", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 110
            testRunner.When("user navigates to pumps", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 111
            testRunner.And("element with id statusHeader is clicked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 112
            testRunner.And("element with class k-grid-delete is clicked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 113
            testRunner.Then("the alert text should be Are you sure you want to delete this record?", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 114
            testRunner.When("click alert box ok true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 115
            testRunner.Then("the number of rows in grid Inventory should be 14", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
